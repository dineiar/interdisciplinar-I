/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package projetointerdisciplinar;

import Classes.Encryption;
import Classes.Matrix;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Vector;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dinei A. Rockenbach
 */
public class Inicial extends javax.swing.JFrame {

    int OPT_SEEMATRIX = 1;
    int OPT_REMOVEMATRIX = 2;
    
    int OPERATION_SUM = 1;
    int OPERATION_MINUS = 2;
    int OPERATION_MULTIPLY_AB = 3;
    int OPERATION_MULTIPLY_BA = 4;
    
    int indexOf = -1;
    
    Color color_disabled = new Color(240, 240, 240);
    
    String allowed_digits = "-0987654321";
    Matrix[] arrMatrix;
    
    private Encryption encrypt;
    private Matrix encrypted_matrix;
    
    /**
     * Creates new form Inicial
     */
    public Inicial() {
        initComponents();
//        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
//        this.setLocation((dim.width-800)/2, (dim.height-600)/2);
        pack();
        setLocationRelativeTo(null);
        
        arrMatrix = new Matrix[0];
        
//        // Testes:
//        arrMatrix = new Matrix[2];
//        arrMatrix[0] = new Matrix(2, 2);
//        double[] line1 = {3,1};
//        arrMatrix[0].setRow(line1, 1);
//        double[] line2 = {5,2};
//        arrMatrix[0].setRow(line2, 2);
//        
//        arrMatrix[1] = new Matrix(2, 2);
//        double[] line3 = {2,-1};
//        arrMatrix[1].setRow(line3, 1);
//        double[] line4 = {-5,3};
//        arrMatrix[1].setRow(line4, 2);
        
        lblSetMatrix.setText("Informe a Matriz " + (arrMatrix.length + 1) + ":");
        btnSetMatrix.setVisible(false);
        scpSetMatrix.setVisible(false);
        
        txtResultOperations.setBackground(this.color_disabled);
        
        this.updateLstMatrix();
//        lstMatrix.setVisible(false);
//        tblSeeMatrix.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JTabbedPane();
        tabSetMatrix = new javax.swing.JPanel();
        lblSetMatrix = new javax.swing.JLabel();
        scpSetMatrix = new javax.swing.JScrollPane();
        tblSetMatrix = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtMatrixCols = new javax.swing.JTextField();
        txtMatrixRows = new javax.swing.JTextField();
        btnOkMatrix = new javax.swing.JButton();
        btnSetMatrix = new javax.swing.JButton();
        btnRandomMatrix = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstMatrix = new javax.swing.JList();
        btnShowMatrix = new javax.swing.JButton();
        btnRemoveMatrix = new javax.swing.JButton();
        btnEditMatrix = new javax.swing.JButton();
        btnIdentityMatrix = new javax.swing.JButton();
        tabOperations = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstMatrixAOperations = new javax.swing.JList();
        btnShowMatrixAOperations = new javax.swing.JButton();
        lblMatrixAOperations = new javax.swing.JLabel();
        lblMatrixBOperations = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstMatrixBOperations = new javax.swing.JList();
        btnShowMatrixBOperations = new javax.swing.JButton();
        btnAPlusB = new javax.swing.JButton();
        btnAMultiplyB = new javax.swing.JButton();
        btnAMinusB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResultOperations = new javax.swing.JTable();
        lblResultOperations = new javax.swing.JLabel();
        btnSaveMatrixOperations = new javax.swing.JButton();
        txtConstantKOperations = new javax.swing.JTextField();
        lblMatrixBOperations1 = new javax.swing.JLabel();
        btnBMultiplyA = new javax.swing.JButton();
        btnKMultiplyA = new javax.swing.JButton();
        btnKMultiplyB = new javax.swing.JButton();
        btnATranspose = new javax.swing.JButton();
        btnBTranspose = new javax.swing.JButton();
        btnAInverse = new javax.swing.JButton();
        btnBInverse = new javax.swing.JButton();
        txtResultOperations = new javax.swing.JTextField();
        btnADeterminant = new javax.swing.JButton();
        btnBDeterminant = new javax.swing.JButton();
        tabCrypt = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstCryptoMatrix = new javax.swing.JList();
        lblCryptText = new javax.swing.JLabel();
        txtCrypt = new javax.swing.JTextField();
        lblDecryptText = new javax.swing.JLabel();
        txtDecrypt = new javax.swing.JTextField();
        lblCryptText2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblEncrypt = new javax.swing.JTable();
        btnCrypt = new javax.swing.JButton();
        btnCrypt1 = new javax.swing.JButton();
        btnShowEncryptMatrix = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matrizes");

        pnlMain.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        pnlMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlMainMouseClicked(evt);
            }
        });

        lblSetMatrix.setText("Informe a Matriz:");

        tblSetMatrix.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblSetMatrix.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblSetMatrix.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblSetMatrixKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblSetMatrixKeyTyped(evt);
            }
        });
        scpSetMatrix.setViewportView(tblSetMatrix);

        jLabel3.setText("Linhas:");

        jLabel4.setText("Colunas:");

        txtMatrixCols.setNextFocusableComponent(btnOkMatrix);
        txtMatrixCols.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMatrixColsKeyTyped(evt);
            }
        });

        txtMatrixRows.setNextFocusableComponent(txtMatrixCols);
        txtMatrixRows.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMatrixRowsKeyTyped(evt);
            }
        });

        btnOkMatrix.setText("OK");
        btnOkMatrix.setNextFocusableComponent(btnRandomMatrix);
        btnOkMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkMatrixActionPerformed(evt);
            }
        });

        btnSetMatrix.setText("Salvar");
        btnSetMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetMatrixActionPerformed(evt);
            }
        });

        btnRandomMatrix.setText("Gerar Matriz Aleat√≥ria");
        btnRandomMatrix.setNextFocusableComponent(btnShowMatrix);
        btnRandomMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomMatrixActionPerformed(evt);
            }
        });

        lstMatrix.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstMatrix.setEnabled(false);
        lstMatrix.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstMatrixValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstMatrix);

        btnShowMatrix.setText("Ver Matriz");
        btnShowMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowMatrixActionPerformed(evt);
            }
        });

        btnRemoveMatrix.setText("Remover Matriz");
        btnRemoveMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveMatrixActionPerformed(evt);
            }
        });

        btnEditMatrix.setText("Editar Matriz");
        btnEditMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMatrixActionPerformed(evt);
            }
        });

        btnIdentityMatrix.setText("Gerar Matriz Identidade");
        btnIdentityMatrix.setNextFocusableComponent(btnShowMatrix);
        btnIdentityMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdentityMatrixActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabSetMatrixLayout = new javax.swing.GroupLayout(tabSetMatrix);
        tabSetMatrix.setLayout(tabSetMatrixLayout);
        tabSetMatrixLayout.setHorizontalGroup(
            tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabSetMatrixLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tabSetMatrixLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSetMatrix))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabSetMatrixLayout.createSequentialGroup()
                        .addGroup(tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSetMatrix)
                            .addGroup(tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabSetMatrixLayout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(27, 27, 27)
                                    .addComponent(txtMatrixRows))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabSetMatrixLayout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtMatrixCols, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(tabSetMatrixLayout.createSequentialGroup()
                                .addComponent(btnOkMatrix)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRandomMatrix)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnIdentityMatrix)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnShowMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemoveMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEditMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(scpSetMatrix, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(161, 161, 161))
        );
        tabSetMatrixLayout.setVerticalGroup(
            tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabSetMatrixLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabSetMatrixLayout.createSequentialGroup()
                        .addComponent(lblSetMatrix)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtMatrixRows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtMatrixCols, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabSetMatrixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOkMatrix)
                            .addComponent(btnRandomMatrix)
                            .addComponent(btnIdentityMatrix)))
                    .addGroup(tabSetMatrixLayout.createSequentialGroup()
                        .addComponent(btnShowMatrix)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditMatrix)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveMatrix))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scpSetMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSetMatrix)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pnlMain.addTab("Matrizes", tabSetMatrix);

        lstMatrixAOperations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstMatrixAOperations.setEnabled(false);
        lstMatrixAOperations.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstMatrixAOperationsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstMatrixAOperations);

        btnShowMatrixAOperations.setText("Ver Matriz");
        btnShowMatrixAOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowMatrixAOperationsActionPerformed(evt);
            }
        });

        lblMatrixAOperations.setText("Matriz A:");

        lblMatrixBOperations.setText("Matriz B:");

        lstMatrixBOperations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstMatrixBOperations.setEnabled(false);
        lstMatrixBOperations.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstMatrixBOperationsValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(lstMatrixBOperations);

        btnShowMatrixBOperations.setText("Ver Matriz");
        btnShowMatrixBOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowMatrixBOperationsActionPerformed(evt);
            }
        });

        btnAPlusB.setText("A + B");
        btnAPlusB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAPlusBActionPerformed(evt);
            }
        });

        btnAMultiplyB.setText("A * B");
        btnAMultiplyB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAMultiplyBActionPerformed(evt);
            }
        });

        btnAMinusB.setText("A - B");
        btnAMinusB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAMinusBActionPerformed(evt);
            }
        });

        tblResultOperations.setBackground(new java.awt.Color(240, 240, 240));
        tblResultOperations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblResultOperations.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblResultOperations.setEnabled(false);
        jScrollPane1.setViewportView(tblResultOperations);

        lblResultOperations.setText("Resultado:");

        btnSaveMatrixOperations.setText("Salvar");
        btnSaveMatrixOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMatrixOperationsActionPerformed(evt);
            }
        });

        txtConstantKOperations.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtConstantKOperationsKeyTyped(evt);
            }
        });

        lblMatrixBOperations1.setText("Constante K:");

        btnBMultiplyA.setText("B * A");
        btnBMultiplyA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBMultiplyAActionPerformed(evt);
            }
        });

        btnKMultiplyA.setText("K * A");
        btnKMultiplyA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKMultiplyAActionPerformed(evt);
            }
        });

        btnKMultiplyB.setText("K * B");
        btnKMultiplyB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKMultiplyBActionPerformed(evt);
            }
        });

        btnATranspose.setText("A Transposta");
        btnATranspose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnATransposeActionPerformed(evt);
            }
        });

        btnBTranspose.setText("B Transposta");
        btnBTranspose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBTransposeActionPerformed(evt);
            }
        });

        btnAInverse.setText("A Inversa");
        btnAInverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAInverseActionPerformed(evt);
            }
        });

        btnBInverse.setText("B Inversa");
        btnBInverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBInverseActionPerformed(evt);
            }
        });

        txtResultOperations.setEditable(false);

        btnADeterminant.setText("A Determinante");
        btnADeterminant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnADeterminantActionPerformed(evt);
            }
        });

        btnBDeterminant.setText("B Determinante");
        btnBDeterminant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBDeterminantActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabOperationsLayout = new javax.swing.GroupLayout(tabOperations);
        tabOperations.setLayout(tabOperationsLayout);
        tabOperationsLayout.setHorizontalGroup(
            tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabOperationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabOperationsLayout.createSequentialGroup()
                        .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblMatrixAOperations, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnShowMatrixAOperations, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblMatrixBOperations)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnShowMatrixBOperations, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                        .addGap(53, 53, 53)
                        .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMatrixBOperations1)
                            .addComponent(txtConstantKOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSaveMatrixOperations)
                        .addGroup(tabOperationsLayout.createSequentialGroup()
                            .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnAMultiplyB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                            .addComponent(btnAMinusB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                            .addComponent(btnBMultiplyA, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                            .addComponent(btnKMultiplyA, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                            .addComponent(btnKMultiplyB, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                                        .addComponent(btnATranspose, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnBTranspose, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnAInverse, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBInverse, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnADeterminant, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBDeterminant, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnAPlusB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(tabOperationsLayout.createSequentialGroup()
                                    .addComponent(lblResultOperations)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtResultOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        tabOperationsLayout.setVerticalGroup(
            tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabOperationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(tabOperationsLayout.createSequentialGroup()
                            .addComponent(lblMatrixAOperations)
                            .addGap(1, 1, 1)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(tabOperationsLayout.createSequentialGroup()
                            .addComponent(lblMatrixBOperations)
                            .addGap(1, 1, 1)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tabOperationsLayout.createSequentialGroup()
                        .addComponent(lblMatrixBOperations1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtConstantKOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShowMatrixAOperations)
                    .addComponent(btnShowMatrixBOperations))
                .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabOperationsLayout.createSequentialGroup()
                        .addGroup(tabOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAPlusB)
                            .addComponent(lblResultOperations)
                            .addComponent(txtResultOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAMinusB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAMultiplyB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBMultiplyA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnKMultiplyA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnKMultiplyB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnATranspose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBTranspose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAInverse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBInverse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnADeterminant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBDeterminant))
                    .addGroup(tabOperationsLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveMatrixOperations)))
                .addGap(0, 113, Short.MAX_VALUE))
        );

        pnlMain.addTab("Opera√ß√µes com Matriz", tabOperations);

        lstCryptoMatrix.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstCryptoMatrix.setEnabled(false);
        lstCryptoMatrix.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCryptoMatrixValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(lstCryptoMatrix);

        lblCryptText.setText("Texto a Criptografar:");

        lblDecryptText.setText("Texto Descriptografado:");

        lblCryptText2.setText("Matriz a utilizar na criptografia:");

        tblEncrypt.setBackground(new java.awt.Color(240, 240, 240));
        tblEncrypt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblEncrypt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblEncrypt.setEnabled(false);
        jScrollPane5.setViewportView(tblEncrypt);

        btnCrypt.setText("Criptografar");
        btnCrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCryptActionPerformed(evt);
            }
        });

        btnCrypt1.setText("Decriptografar");
        btnCrypt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrypt1ActionPerformed(evt);
            }
        });

        btnShowEncryptMatrix.setText("Ver Matriz");
        btnShowEncryptMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowEncryptMatrixActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabCryptLayout = new javax.swing.GroupLayout(tabCrypt);
        tabCrypt.setLayout(tabCryptLayout);
        tabCryptLayout.setHorizontalGroup(
            tabCryptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCryptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCryptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCryptLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShowEncryptMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(504, 504, 504))
                    .addGroup(tabCryptLayout.createSequentialGroup()
                        .addGroup(tabCryptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCryptText)
                            .addComponent(lblCryptText2)
                            .addComponent(lblDecryptText)
                            .addComponent(btnCrypt)
                            .addComponent(btnCrypt1)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                            .addComponent(txtCrypt)
                            .addComponent(txtDecrypt))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        tabCryptLayout.setVerticalGroup(
            tabCryptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCryptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCryptText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCryptText2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabCryptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShowEncryptMatrix))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCrypt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCrypt1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDecryptText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );

        pnlMain.addTab("Criptografia", tabCrypt);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 817, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pnlMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlMainMouseClicked
        //        System.out.println(pnlMain.getSelectedIndex());
        //        if (pnlMain.getSelectedIndex() != 0) {
        //            this.indexOf = -1;
        //        }
    }//GEN-LAST:event_pnlMainMouseClicked

    private void btnShowEncryptMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowEncryptMatrixActionPerformed
        this.matrixSelect(lstCryptoMatrix, this.OPT_SEEMATRIX); // Ver matriz
    }//GEN-LAST:event_btnShowEncryptMatrixActionPerformed

    private void btnCrypt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrypt1ActionPerformed
        txtDecrypt.setText(this.encrypt.decrypt(this.encrypted_matrix));
        if (this.encrypt.error) {
            this.showError(this.encrypt.error_dsc);
        }
    }//GEN-LAST:event_btnCrypt1ActionPerformed

    private void btnCryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCryptActionPerformed
        if (this.checkMatrixSelect(lstCryptoMatrix)) {
            txtDecrypt.setText("");
            this.encrypt = new Encryption(arrMatrix[lstCryptoMatrix.getSelectedIndex()]);
            if (this.encrypt.error) {
                this.showError(this.encrypt.error_dsc);
            } else {
                this.encrypted_matrix = this.encrypt.encrypt(txtCrypt.getText());
                if (this.encrypt.error) {
                    this.showError(this.encrypt.error_dsc);
                } else {
                    DefaultTableModel model = new DefaultTableModel(this.encrypted_matrix.getRows(), this.encrypted_matrix.getCols());
                    tblEncrypt.setModel(model);
                    for(int row = 0; row < this.encrypted_matrix.getRows(); row++) {
                        for(int col = 0; col < this.encrypted_matrix.getCols(); col++) {
                            tblEncrypt.setValueAt(this.encrypted_matrix.getElements(row, col), row, col);
                        }
                    }
                    txtCrypt.setText("");
                }
            }
        }
    }//GEN-LAST:event_btnCryptActionPerformed

    private void lstCryptoMatrixValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCryptoMatrixValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_lstCryptoMatrixValueChanged

    private void btnIdentityMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdentityMatrixActionPerformed
        if (!txtMatrixRows.getText().equals("")) {
            if (!txtMatrixCols.getText().equals("")) {
                int rows = Integer.parseInt(txtMatrixRows.getText());
                int cols = Integer.parseInt(txtMatrixCols.getText());

                DefaultTableModel model = new DefaultTableModel(rows, cols);
                tblSetMatrix.setModel(model);

                Matrix mat = Matrix.identity(rows, cols);
                for (int row = 0; row < tblSetMatrix.getRowCount(); row++) {
                    for (int col = 0; col < tblSetMatrix.getColumnCount(); col++) {
                        tblSetMatrix.setValueAt(mat.getElements(row, col), row, col);
                    }
                }
                btnSetMatrix.setVisible(true);
                scpSetMatrix.setVisible(true);
                getContentPane().validate();
                getContentPane().repaint();
            } else {
                this.showWarning("Por favor, informe o n√∫mero de colunas");
            }
        } else {
            this.showWarning("Por favor, informe o n√∫mero de linhas");
        }
    }//GEN-LAST:event_btnIdentityMatrixActionPerformed

    private void btnEditMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMatrixActionPerformed
        if (this.checkMatrixSelect(lstMatrix)) {
            this.indexOf = lstMatrix.getSelectedIndex();
            Matrix matrix = arrMatrix[this.indexOf];

            DefaultTableModel model = new DefaultTableModel(matrix.getRows(), matrix.getCols());
            tblSetMatrix.setModel(model);

            for(int row = 0; row < matrix.getRows(); row++) {
                for(int col = 0; col < matrix.getCols(); col++) {
                    tblSetMatrix.setValueAt(matrix.getElements(row, col), row, col);
                }
            }
            btnSetMatrix.setVisible(true);
            scpSetMatrix.setVisible(true);
            getContentPane().validate();
            getContentPane().repaint();
        }
    }//GEN-LAST:event_btnEditMatrixActionPerformed

    private void btnRemoveMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveMatrixActionPerformed
        this.matrixSelect(lstMatrix, this.OPT_REMOVEMATRIX); // Remover matriz
    }//GEN-LAST:event_btnRemoveMatrixActionPerformed

    private void btnShowMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowMatrixActionPerformed
        this.matrixSelect(lstMatrix, this.OPT_SEEMATRIX); // Ver matriz
    }//GEN-LAST:event_btnShowMatrixActionPerformed

    private void lstMatrixValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstMatrixValueChanged

    }//GEN-LAST:event_lstMatrixValueChanged

    private void btnRandomMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomMatrixActionPerformed
        if (!txtMatrixRows.getText().equals("")) {
            if (!txtMatrixCols.getText().equals("")) {
                int rows = Integer.parseInt(txtMatrixRows.getText());
                int cols = Integer.parseInt(txtMatrixCols.getText());

                DefaultTableModel model = new DefaultTableModel(rows, cols);
                tblSetMatrix.setModel(model);

                Matrix mat = Matrix.random(rows, cols);
                for (int row = 0; row < tblSetMatrix.getRowCount(); row++) {
                    for (int col = 0; col < tblSetMatrix.getColumnCount(); col++) {
                        tblSetMatrix.setValueAt(mat.getElements(row, col), row, col);
                    }
                }
                btnSetMatrix.setVisible(true);
                scpSetMatrix.setVisible(true);
                getContentPane().validate();
                getContentPane().repaint();
            } else {
                this.showWarning("Por favor, informe o n√∫mero de colunas");
            }
        } else {
            this.showWarning("Por favor, informe o n√∫mero de linhas");
        }
    }//GEN-LAST:event_btnRandomMatrixActionPerformed

    private void btnSetMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetMatrixActionPerformed
        this.setMatrix(tblSetMatrix);
        btnSetMatrix.setVisible(false);
        scpSetMatrix.setVisible(false);
        getContentPane().validate();
        getContentPane().repaint();
        lblSetMatrix.setText("Informe a Matriz " + (arrMatrix.length + 1) + ":");
    }//GEN-LAST:event_btnSetMatrixActionPerformed

    private void btnOkMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkMatrixActionPerformed
        if (!txtMatrixRows.getText().equals("")) {
            if (!txtMatrixCols.getText().equals("")) {
                int rows = Integer.parseInt(txtMatrixRows.getText());
                int cols = Integer.parseInt(txtMatrixCols.getText());

                DefaultTableModel model = new DefaultTableModel(rows, cols);
                tblSetMatrix.setModel(model);
                for (int row = 0; row < tblSetMatrix.getRowCount(); row++) {
                    for (int col = 0; col < tblSetMatrix.getColumnCount(); col++) {
                        tblSetMatrix.setValueAt(0, row, col);
                    }
                }
                btnSetMatrix.setVisible(true);
                scpSetMatrix.setVisible(true);
                getContentPane().validate();
                getContentPane().repaint();
            } else {
                this.showWarning("Por favor, informe o n√∫mero de colunas");
            }
        } else {
            this.showWarning("Por favor, informe o n√∫mero de linhas");
        }
    }//GEN-LAST:event_btnOkMatrixActionPerformed

    private void txtMatrixRowsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMatrixRowsKeyTyped
        if (!this.allowed_digits.contains(String.valueOf(evt.getKeyChar()))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMatrixRowsKeyTyped

    private void txtMatrixColsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMatrixColsKeyTyped
        if (!this.allowed_digits.contains(String.valueOf(evt.getKeyChar()))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMatrixColsKeyTyped

    private void tblSetMatrixKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSetMatrixKeyTyped
        String typed = String.valueOf(evt.getKeyChar());
//        System.out.println("'" + typed + "'");
        if (!this.allowed_digits.contains(typed)) {
            evt.consume();
        }
    }//GEN-LAST:event_tblSetMatrixKeyTyped

    private void tblSetMatrixKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSetMatrixKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblSetMatrixKeyPressed

    private void btnBDeterminantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBDeterminantActionPerformed
        if (this.checkMatrixSelect(lstMatrixBOperations)) {
            Matrix matrix = arrMatrix[lstMatrixBOperations.getSelectedIndex()];
            Matrix result_matrix = new Matrix(0, 0);
            double det = matrix.determinant();
            if (matrix.error) {
                this.showError(matrix.error_dsc);
            } else {
                this.setResultOperations(result_matrix, false);
                txtResultOperations.setText(String.valueOf(det));
            }
        }
    }//GEN-LAST:event_btnBDeterminantActionPerformed

    private void btnADeterminantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnADeterminantActionPerformed
        if (this.checkMatrixSelect(lstMatrixAOperations)) {
            Matrix matrix = arrMatrix[lstMatrixAOperations.getSelectedIndex()];
            Matrix result_matrix = new Matrix(0, 0);
            double det = matrix.determinant();
            if (matrix.error) {
                this.showError(matrix.error_dsc);
            } else {
                this.setResultOperations(result_matrix, false);
                txtResultOperations.setText(String.valueOf(det));
            }
        }
    }//GEN-LAST:event_btnADeterminantActionPerformed

    private void btnBInverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBInverseActionPerformed
        if (this.checkMatrixSelect(lstMatrixBOperations)) {
            Matrix matrix = arrMatrix[lstMatrixBOperations.getSelectedIndex()];
            Matrix result_matrix = matrix.inverse();
            if (matrix.error) {
                this.showError(matrix.error_dsc);
            } else {
                this.setResultOperations(result_matrix, false);
            }
        }
    }//GEN-LAST:event_btnBInverseActionPerformed

    private void btnAInverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAInverseActionPerformed
        if (this.checkMatrixSelect(lstMatrixAOperations)) {
            Matrix matrix = arrMatrix[lstMatrixAOperations.getSelectedIndex()];
            Matrix result_matrix = matrix.inverse();
            if (matrix.error) {
                this.showError(matrix.error_dsc);
            } else {
                this.setResultOperations(result_matrix, false);
            }
        }
    }//GEN-LAST:event_btnAInverseActionPerformed

    private void btnBTransposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBTransposeActionPerformed
        if (this.checkMatrixSelect(lstMatrixBOperations)) {
            Matrix matrixB = arrMatrix[lstMatrixBOperations.getSelectedIndex()];
            Matrix result_matrix = matrixB.transpose();
            if (matrixB.error) {
                this.showError(matrixB.error_dsc);
            } else {
                this.setResultOperations(result_matrix, false);
            }
        }
    }//GEN-LAST:event_btnBTransposeActionPerformed

    private void btnATransposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnATransposeActionPerformed
        if (this.checkMatrixSelect(lstMatrixAOperations)) {
            Matrix matrixA = arrMatrix[lstMatrixAOperations.getSelectedIndex()];
            Matrix result_matrix = matrixA.transpose();
            if (matrixA.error) {
                this.showError(matrixA.error_dsc);
            } else {
                this.setResultOperations(result_matrix, false);
            }
        }
    }//GEN-LAST:event_btnATransposeActionPerformed

    private void btnKMultiplyBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKMultiplyBActionPerformed
        if (this.checkMatrixSelect(lstMatrixBOperations)) {
            if (!txtConstantKOperations.getText().equals("")) {
                Matrix matrixB = arrMatrix[lstMatrixBOperations.getSelectedIndex()];
                Matrix result_matrix = matrixB.multiply(Double.valueOf(txtConstantKOperations.getText()));
                if (matrixB.error) {
                    this.showError(matrixB.error_dsc);
                } else {
                    this.setResultOperations(result_matrix, false);
                }
            } else {
                this.showError("K est√° vazio");
            }
        }
    }//GEN-LAST:event_btnKMultiplyBActionPerformed

    private void btnKMultiplyAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKMultiplyAActionPerformed
        if (this.checkMatrixSelect(lstMatrixAOperations)) {
            if (!txtConstantKOperations.getText().equals("")) {
                Matrix matrixA = arrMatrix[lstMatrixAOperations.getSelectedIndex()];
                Matrix result_matrix = matrixA.multiply(Double.valueOf(txtConstantKOperations.getText()));
                if (matrixA.error) {
                    this.showError(matrixA.error_dsc);
                } else {
                    this.setResultOperations(result_matrix, false);
                }
            } else {
                this.showError("K est√° vazio");
            }
        }
    }//GEN-LAST:event_btnKMultiplyAActionPerformed

    private void btnBMultiplyAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBMultiplyAActionPerformed
        if (this.checkMatrixSelect(lstMatrixAOperations) && this.checkMatrixSelect(lstMatrixBOperations)) {
            Matrix matrixA = arrMatrix[lstMatrixAOperations.getSelectedIndex()];
            Matrix matrixB = arrMatrix[lstMatrixBOperations.getSelectedIndex()];
            Matrix result_matrix = matrixB.multiply(matrixA);
            if (matrixB.error) {
                this.showError(matrixB.error_dsc);
            } else {
                this.setResultOperations(result_matrix, true);
            }
        }
    }//GEN-LAST:event_btnBMultiplyAActionPerformed

    private void txtConstantKOperationsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConstantKOperationsKeyTyped
        if (!this.allowed_digits.contains(String.valueOf(evt.getKeyChar()))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtConstantKOperationsKeyTyped

    private void btnSaveMatrixOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMatrixOperationsActionPerformed
        this.setMatrix(tblResultOperations);
    }//GEN-LAST:event_btnSaveMatrixOperationsActionPerformed

    private void btnAMinusBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAMinusBActionPerformed
        if (this.checkMatrixSelect(lstMatrixAOperations) && this.checkMatrixSelect(lstMatrixBOperations)) {
            Matrix matrixA = arrMatrix[lstMatrixAOperations.getSelectedIndex()];
            Matrix matrixB = arrMatrix[lstMatrixBOperations.getSelectedIndex()];
            Matrix result_matrix = matrixA.minus(matrixB);
            if (matrixA.error) {
                this.showError(matrixA.error_dsc);
            } else {
                this.setResultOperations(result_matrix, false);
            }
        }
    }//GEN-LAST:event_btnAMinusBActionPerformed

    private void btnAMultiplyBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAMultiplyBActionPerformed
        if (this.checkMatrixSelect(lstMatrixAOperations) && this.checkMatrixSelect(lstMatrixBOperations)) {
            Matrix matrixA = arrMatrix[lstMatrixAOperations.getSelectedIndex()];
            Matrix matrixB = arrMatrix[lstMatrixBOperations.getSelectedIndex()];
            Matrix result_matrix = matrixA.multiply(matrixB);
            if (matrixA.error) {
                this.showError(matrixA.error_dsc);
            } else {
                this.setResultOperations(result_matrix, true);
            }
        }
    }//GEN-LAST:event_btnAMultiplyBActionPerformed

    private void btnAPlusBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAPlusBActionPerformed
        if (this.checkMatrixSelect(lstMatrixAOperations) && this.checkMatrixSelect(lstMatrixBOperations)) {
            Matrix matrixA = arrMatrix[lstMatrixAOperations.getSelectedIndex()];
            Matrix matrixB = arrMatrix[lstMatrixBOperations.getSelectedIndex()];
            Matrix result_matrix = matrixA.sum(matrixB);
            if (matrixA.error) {
                this.showError(matrixA.error_dsc);
            } else {
                this.setResultOperations(result_matrix, false);
            }
        }
    }//GEN-LAST:event_btnAPlusBActionPerformed

    private void btnShowMatrixBOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowMatrixBOperationsActionPerformed
        this.matrixSelect(lstMatrixBOperations, this.OPT_SEEMATRIX); // Ver matriz
    }//GEN-LAST:event_btnShowMatrixBOperationsActionPerformed

    private void lstMatrixBOperationsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstMatrixBOperationsValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_lstMatrixBOperationsValueChanged

    private void btnShowMatrixAOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowMatrixAOperationsActionPerformed
        this.matrixSelect(lstMatrixAOperations, this.OPT_SEEMATRIX); // Ver matriz
    }//GEN-LAST:event_btnShowMatrixAOperationsActionPerformed

    private void lstMatrixAOperationsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstMatrixAOperationsValueChanged

    }//GEN-LAST:event_lstMatrixAOperationsValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicial().setVisible(true);
            }
        });
    }
    
    public void setMatrix(JTable tbl) {
        if (tbl.isEditing()) 
            tbl.getCellEditor().stopCellEditing();
        if (this.indexOf == -1) {
            Matrix[] auxArrMatrix = new Matrix[this.arrMatrix.length+1];
            System.arraycopy(this.arrMatrix, 0, auxArrMatrix, 0, this.arrMatrix.length);
            Matrix matrix = new Matrix(tbl.getRowCount(), tbl.getColumnCount());
            for (int row = 0; row < matrix.getRows(); row++) {
                for (int col = 0; col < matrix.getCols(); col++) {
                    String v = tbl.getValueAt(row, col).toString().trim();
                    double d = 0;
                    if (!v.equals(""))
                        d = Double.valueOf(v);
                    matrix.setElements(row, col, d);
                }
            }
            auxArrMatrix[this.arrMatrix.length] = matrix;
            this.arrMatrix = auxArrMatrix;
            this.updateLstMatrix();
        } else {
            Matrix matrix = this.arrMatrix[this.indexOf];
            for (int row = 0; row < matrix.getRows(); row++) {
                for (int col = 0; col < matrix.getCols(); col++) {
                    String v = tbl.getValueAt(row, col).toString().trim();
                    double d = 0;
                    if (!v.equals(""))
                        d = Double.valueOf(v);
                    matrix.setElements(row, col, d);
                }
            }
            this.arrMatrix[this.indexOf] = matrix;
            this.indexOf = -1;
        }
    }
    
    private void updateLstMatrix() {
        Vector<String> listData = new Vector<>();
        listData.removeAllElements();
        for (int i = 0; i < arrMatrix.length; i++) 
            listData.add("Matriz " + (i + 1) + " (" + arrMatrix[i].getRows() + "x" + arrMatrix[i].getCols() + ")");
        
        JList[] arrList = {lstMatrix, lstMatrixAOperations, lstMatrixBOperations, lstCryptoMatrix};
        
        for (int i = 0; i < arrList.length; i++) {
            arrList[i].removeAll();
            arrList[i].setListData(listData);
            if (arrMatrix.length > 0) {
                arrList[i].setEnabled(true);
                arrList[i].setBackground(Color.WHITE);
            } else {
                arrList[i].setEnabled(false);
                arrList[i].setBackground(this.color_disabled);
            }
            arrList[i].validate();
            arrList[i].repaint();
        }
        
        switch(arrMatrix.length) {
            case 0:
                pnlMain.setEnabledAt(0, true);
                pnlMain.setEnabledAt(1, false);
                pnlMain.setEnabledAt(2, false);
                break;
            case 1:
                pnlMain.setEnabledAt(0, true);
                pnlMain.setEnabledAt(1, true);
                pnlMain.setEnabledAt(2, true);
                break;
            default:
                pnlMain.setEnabledAt(0, true);
                pnlMain.setEnabledAt(1, true);
                pnlMain.setEnabledAt(2, true);
                break;
        }
    }
    
    private void showError(String txt) {
        JOptionPane.showMessageDialog(null, txt, "Erro", JOptionPane.ERROR_MESSAGE);
    }
    
    private void showWarning(String txt) {
        JOptionPane.showMessageDialog(null, txt, "Alerta", JOptionPane.WARNING_MESSAGE);
    }
    
    private void matrixSelect(JList lst, int opt) {
        if (this.checkMatrixSelect(lst)) {
            Matrix matrix;
            switch (opt) {
                case 1: // this.OPT_SEEMATRIX, Ver matriz
                    matrix = arrMatrix[lst.getSelectedIndex()];
                    // Cria a tabela
                    DefaultTableModel model = new DefaultTableModel(matrix.getRows(), matrix.getCols());
                    JTable tbl = new JTable(model);
                    tbl.setEnabled(false);
                    tbl.setAutoscrolls(true);
                    tbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                    tbl.setBackground(this.color_disabled);
                    // Cria o scrollpane
                    JScrollPane jsp = new JScrollPane();
                    jsp.setViewportView(tbl);
                    // Define o tamanho da janela
                    Dimension dim = new Dimension();
                    if (matrix.getRows() > 3) {
                        dim.width = 700;
                        dim.height = 500;
                    } else {
                        dim.width = 300;
                        dim.height = 200;
                    }
                    jsp.setPreferredSize(dim);
                    // Seta os valores na tabela criada
                    for(int row = 0; row < matrix.getRows(); row++) {
                        for(int col = 0; col < matrix.getCols(); col++) {
                            double val = matrix.getElements(row, col);
                            tbl.setValueAt(Matrix.formatNumber(val), row, col);
                        }
                    }
                    String title = String.valueOf(lst.getModel().getElementAt(lst.getSelectedIndex()));
                    JOptionPane.showMessageDialog(null, jsp, title, JOptionPane.PLAIN_MESSAGE);
                    
                    break;
                case 2: // this.OPT_REMOVEMATRIX, Remover matriz
                    this.indexOf = -1; // Se estiver editando, cancela
                    Matrix[] auxArrMatrix = new Matrix[arrMatrix.length-1];
                    int index = 0;
                    for (int i = 0; i < arrMatrix.length; i++) {
                        if (i == lstMatrix.getSelectedIndex())
                            continue;
                        auxArrMatrix[index] = arrMatrix[i];
                        index++;
                    }
                    arrMatrix = auxArrMatrix;
                    this.updateLstMatrix();
                    break;
            }
        }
    }
    
    public boolean checkMatrixSelect(JList lst) {
        boolean r = false;
        if (arrMatrix.length != 0) {
            if (lst.getSelectedIndex() != -1) {
                r = true;
            } else {
                this.showWarning("Por favor, selecione uma matriz");
            }
        } else {
            this.showWarning("Informe alguma matriz para poder visualiz√°-la");
        }
        return r;
    }
    
    public void setResultOperations(Matrix result_matrix, boolean formatNumber) {
        txtResultOperations.setText("");
        
        DefaultTableModel model = new DefaultTableModel(result_matrix.getRows(), result_matrix.getCols());
        tblResultOperations.setModel(model);
        for (int row = 0; row < result_matrix.getRows(); row++) {
            for (int col = 0; col < result_matrix.getCols(); col++) {
                double val = result_matrix.getElements(row, col);
                if (formatNumber) 
                    val = Matrix.formatNumber(val);
                tblResultOperations.setValueAt(val, row, col);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnADeterminant;
    private javax.swing.JButton btnAInverse;
    private javax.swing.JButton btnAMinusB;
    private javax.swing.JButton btnAMultiplyB;
    private javax.swing.JButton btnAPlusB;
    private javax.swing.JButton btnATranspose;
    private javax.swing.JButton btnBDeterminant;
    private javax.swing.JButton btnBInverse;
    private javax.swing.JButton btnBMultiplyA;
    private javax.swing.JButton btnBTranspose;
    private javax.swing.JButton btnCrypt;
    private javax.swing.JButton btnCrypt1;
    private javax.swing.JButton btnEditMatrix;
    private javax.swing.JButton btnIdentityMatrix;
    private javax.swing.JButton btnKMultiplyA;
    private javax.swing.JButton btnKMultiplyB;
    private javax.swing.JButton btnOkMatrix;
    private javax.swing.JButton btnRandomMatrix;
    private javax.swing.JButton btnRemoveMatrix;
    private javax.swing.JButton btnSaveMatrixOperations;
    private javax.swing.JButton btnSetMatrix;
    private javax.swing.JButton btnShowEncryptMatrix;
    private javax.swing.JButton btnShowMatrix;
    private javax.swing.JButton btnShowMatrixAOperations;
    private javax.swing.JButton btnShowMatrixBOperations;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblCryptText;
    private javax.swing.JLabel lblCryptText2;
    private javax.swing.JLabel lblDecryptText;
    private javax.swing.JLabel lblMatrixAOperations;
    private javax.swing.JLabel lblMatrixBOperations;
    private javax.swing.JLabel lblMatrixBOperations1;
    private javax.swing.JLabel lblResultOperations;
    private javax.swing.JLabel lblSetMatrix;
    private javax.swing.JList lstCryptoMatrix;
    private javax.swing.JList lstMatrix;
    private javax.swing.JList lstMatrixAOperations;
    private javax.swing.JList lstMatrixBOperations;
    private javax.swing.JTabbedPane pnlMain;
    private javax.swing.JScrollPane scpSetMatrix;
    private javax.swing.JPanel tabCrypt;
    private javax.swing.JPanel tabOperations;
    private javax.swing.JPanel tabSetMatrix;
    private javax.swing.JTable tblEncrypt;
    private javax.swing.JTable tblResultOperations;
    private javax.swing.JTable tblSetMatrix;
    private javax.swing.JTextField txtConstantKOperations;
    private javax.swing.JTextField txtCrypt;
    private javax.swing.JTextField txtDecrypt;
    private javax.swing.JTextField txtMatrixCols;
    private javax.swing.JTextField txtMatrixRows;
    private javax.swing.JTextField txtResultOperations;
    // End of variables declaration//GEN-END:variables
    
}
